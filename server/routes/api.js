const express = require('express');
const router = express.Router();
const mongoose = require('mongoose')
const multer = require('multer')
const upload = multer({dest: 'uploads/'})
const fs = require('fs')
const path = require('path')
require('dotenv').config()

const Imovel = require('../models/imoveis')

// Making connection to mongoDB

mongoose.connect(process.env.MONGODB_URI, {useNewUrlParser: true, useUnifiedTopology: true});

const db = mongoose.connection;
db.on('error', error => console.log(error));
db.once('open', () => {
    console.log('We are connected!');    
});



// Defining routers
router.get('/', (req, res) => {
    // res.send('Hello multer blabla');
    //res.sendFile(path.join(__dirname, '../index.html'));
    res.sendFile(path.join(__dirname, '..', 'index.html'));
    
});


router.get('/download/:filename', (req, res) => {

    //Creating a bucket to download a file from mongo db
    const bucket = new mongoose.mongo.GridFSBucket(db.db, {
        bucketName: 'fotos'
    });

    //bucket.openDownloadStreamByName('fotoSergio.jpeg')
    bucket.openDownloadStreamByName(req.params.filename)
        //The next line will save de file on our server 
            //.pipe(fs.createWriteStream('./sample-download.jpeg'))
        //The next line will send the file to res and display on browse
        .pipe(res)
        .on('error', ()=>{
            console.log("An error occurred...");
            res.send(error);
        })
        .on('finish', ()=> {
            console.log("done downloading");
            //res.send('Done Downloding');
        });

});


router.post('/profile', upload.single('avatar'), function (req, res) {

    //Configuring the file name to be saved on db
    const fileName = req.file.filename;
    const extension = req.file.originalname.split('.').pop();
    const fileNameToBeSavedOnDB = `${fileName}.${extension}`;

    // Creating and saving a new instance of Imovel
    Imovel.create({
        type: req.body.type,
        description: req.body.description,
        price: req.body.price,
        imageName: fileNameToBeSavedOnDB
    }).then(function(imovel){
        res.send(imovel);
    }).catch(error => {
        console.log(error);
        res.send('Impossible to create document: ' + error)
    })



    // Creating a bucket and saving in database
    const bucket = new mongoose.mongo.GridFSBucket(db.db, {
        bucketName: 'fotos'
    });
    
    //The next line will save de file with the name fotoSergio.jpeg
    //const uploadStream = bucket.openUploadStream('fotoSergio.jpeg');

    //The next line will save the file with the name generated by multer plus the extension of the original file
    const uploadStream = bucket.openUploadStream(fileNameToBeSavedOnDB);
    
    
    console.log('The file original name is: ' + req.file.originalname);
    console.log('The file extension is: ' + extension);
    
    //Creating a readStream and piping do db
    fs.createReadStream(__dirname + '/../uploads/' + req.file.filename)
    .pipe(uploadStream)
    .on('error', () => console.log(error))
    .on('finish', () => {
        console.log('Done!!!!', 'The file id is: ' + uploadStream.id);
        console.log('Done!!!!', 'The file name on db is: ' + uploadStream.filename);
        // process.exit(0);
    })

    // Deleting file in the server
    fs.unlink(__dirname + '/../uploads/' + req.file.filename, (err) => {
        if (err) {
            console.log(err)
        }
        console.log('File removed from the server!!!')
        return
    })

});


module.exports = router;